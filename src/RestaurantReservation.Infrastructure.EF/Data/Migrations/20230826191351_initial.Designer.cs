// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestaurantReservation.Infrastructure.EF.Data;

#nullable disable

namespace RestaurantReservation.Infrastructure.EF.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230826191351_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestaurantReservation.Domain.CustomerAggregate.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("RestaurantReservation.Domain.ReservationAggregate.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("reservation_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by");

                    b.Property<int>("Occupants")
                        .HasColumnType("integer")
                        .HasColumnName("occupants");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("date")
                        .HasColumnName("reservation_date");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uuid")
                        .HasColumnName("review_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid")
                        .HasColumnName("table_id");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_reservations_customer_id");

                    b.HasIndex("RestaurantId")
                        .HasDatabaseName("ix_reservations_restaurant_id");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("RestaurantReservation.Domain.RestaurantAggregate.Models.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("web_site");

                    b.HasKey("Id")
                        .HasName("pk_restaurants");

                    b.ToTable("restaurants", (string)null);
                });

            modelBuilder.Entity("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<long?>("LastModifiedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("last_modified_by");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid")
                        .HasColumnName("reservation_id");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid")
                        .HasColumnName("restaurant_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("RestaurantId")
                        .HasDatabaseName("ix_reviews_restaurant_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("RestaurantReservation.Domain.CustomerAggregate.Customer", b =>
                {
                    b.OwnsOne("RestaurantReservation.Domain.Common.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid")
                                .HasColumnName("customer_id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("email");

                            b1.HasKey("CustomerId")
                                .HasName("pk_customers");

                            b1.ToTable("customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_customer_id");
                        });

                    b.OwnsOne("RestaurantReservation.Domain.CustomerAggregate.ValueObjects.CustomerName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid")
                                .HasColumnName("customer_id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("last_name");

                            b1.HasKey("CustomerId")
                                .HasName("pk_customers");

                            b1.ToTable("customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_customer_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantReservation.Domain.ReservationAggregate.Models.Reservation", b =>
                {
                    b.HasOne("RestaurantReservation.Domain.CustomerAggregate.Customer", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_customers_customer_id");

                    b.HasOne("RestaurantReservation.Domain.RestaurantAggregate.Models.Restaurant", null)
                        .WithMany("Reservations")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_restaurants_restaurant_id");
                });

            modelBuilder.Entity("RestaurantReservation.Domain.RestaurantAggregate.Models.Restaurant", b =>
                {
                    b.OwnsOne("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.WorkTime", "WorkTime", b1 =>
                        {
                            b1.Property<Guid>("RestaurantId")
                                .HasColumnType("uuid")
                                .HasColumnName("restaurant_id");

                            b1.HasKey("RestaurantId")
                                .HasName("pk_restaurants");

                            b1.ToTable("restaurants");

                            b1.WithOwner()
                                .HasForeignKey("RestaurantId")
                                .HasConstraintName("fk_restaurants_restaurants_restaurant_id");

                            b1.OwnsOne("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.WorkingHours", "Friday", b2 =>
                                {
                                    b2.Property<Guid>("WorkTimeRestaurantId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("restaurant_id");

                                    b2.Property<TimeSpan>("ClosingTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_friday_closing_time");

                                    b2.Property<TimeSpan>("OpeningTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_friday_opening_time");

                                    b2.HasKey("WorkTimeRestaurantId")
                                        .HasName("pk_restaurants");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkTimeRestaurantId")
                                        .HasConstraintName("fk_restaurants_restaurants_restaurant_id");
                                });

                            b1.OwnsOne("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.WorkingHours", "Monday", b2 =>
                                {
                                    b2.Property<Guid>("WorkTimeRestaurantId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("restaurant_id");

                                    b2.Property<TimeSpan>("ClosingTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_monday_closing_time");

                                    b2.Property<TimeSpan>("OpeningTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_monday_opening_time");

                                    b2.HasKey("WorkTimeRestaurantId")
                                        .HasName("pk_restaurants");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkTimeRestaurantId")
                                        .HasConstraintName("fk_restaurants_restaurants_restaurant_id");
                                });

                            b1.OwnsOne("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.WorkingHours", "Saturday", b2 =>
                                {
                                    b2.Property<Guid>("WorkTimeRestaurantId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("restaurant_id");

                                    b2.Property<TimeSpan>("ClosingTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_saturday_closing_time");

                                    b2.Property<TimeSpan>("OpeningTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_saturday_opening_time");

                                    b2.HasKey("WorkTimeRestaurantId")
                                        .HasName("pk_restaurants");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkTimeRestaurantId")
                                        .HasConstraintName("fk_restaurants_restaurants_restaurant_id");
                                });

                            b1.OwnsOne("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.WorkingHours", "Sunday", b2 =>
                                {
                                    b2.Property<Guid>("WorkTimeRestaurantId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("restaurant_id");

                                    b2.Property<TimeSpan>("ClosingTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_sunday_closing_time");

                                    b2.Property<TimeSpan>("OpeningTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_sunday_opening_time");

                                    b2.HasKey("WorkTimeRestaurantId")
                                        .HasName("pk_restaurants");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkTimeRestaurantId")
                                        .HasConstraintName("fk_restaurants_restaurants_restaurant_id");
                                });

                            b1.OwnsOne("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.WorkingHours", "Thursday", b2 =>
                                {
                                    b2.Property<Guid>("WorkTimeRestaurantId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("restaurant_id");

                                    b2.Property<TimeSpan>("ClosingTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_thursday_closing_time");

                                    b2.Property<TimeSpan>("OpeningTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_thursday_opening_time");

                                    b2.HasKey("WorkTimeRestaurantId")
                                        .HasName("pk_restaurants");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkTimeRestaurantId")
                                        .HasConstraintName("fk_restaurants_restaurants_restaurant_id");
                                });

                            b1.OwnsOne("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.WorkingHours", "Tuesday", b2 =>
                                {
                                    b2.Property<Guid>("WorkTimeRestaurantId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("restaurant_id");

                                    b2.Property<TimeSpan>("ClosingTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_tuesday_closing_time");

                                    b2.Property<TimeSpan>("OpeningTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_tuesday_opening_time");

                                    b2.HasKey("WorkTimeRestaurantId")
                                        .HasName("pk_restaurants");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkTimeRestaurantId")
                                        .HasConstraintName("fk_restaurants_restaurants_restaurant_id");
                                });

                            b1.OwnsOne("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.WorkingHours", "Wednesday", b2 =>
                                {
                                    b2.Property<Guid>("WorkTimeRestaurantId")
                                        .HasColumnType("uuid")
                                        .HasColumnName("restaurant_id");

                                    b2.Property<TimeSpan>("ClosingTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_wednesday_closing_time");

                                    b2.Property<TimeSpan>("OpeningTime")
                                        .HasColumnType("interval")
                                        .HasColumnName("work_time_wednesday_opening_time");

                                    b2.HasKey("WorkTimeRestaurantId")
                                        .HasName("pk_restaurants");

                                    b2.ToTable("restaurants");

                                    b2.WithOwner()
                                        .HasForeignKey("WorkTimeRestaurantId")
                                        .HasConstraintName("fk_restaurants_restaurants_restaurant_id");
                                });

                            b1.Navigation("Friday")
                                .IsRequired();

                            b1.Navigation("Monday")
                                .IsRequired();

                            b1.Navigation("Saturday")
                                .IsRequired();

                            b1.Navigation("Sunday")
                                .IsRequired();

                            b1.Navigation("Thursday")
                                .IsRequired();

                            b1.Navigation("Tuesday")
                                .IsRequired();

                            b1.Navigation("Wednesday")
                                .IsRequired();
                        });

                    b.Navigation("WorkTime")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantReservation.Domain.RestaurantAggregate.ValueObjects.Review", b =>
                {
                    b.HasOne("RestaurantReservation.Domain.RestaurantAggregate.Models.Restaurant", null)
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_restaurants_restaurant_id");

                    b.OwnsOne("RestaurantReservation.Domain.ReservationAggregate.Models.Rating", "Rating", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .HasColumnType("uuid")
                                .HasColumnName("review_id");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("rating");

                            b1.HasKey("ReviewId")
                                .HasName("pk_reviews");

                            b1.ToTable("reviews");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId")
                                .HasConstraintName("fk_reviews_reviews_review_id");
                        });

                    b.Navigation("Rating")
                        .IsRequired();
                });

            modelBuilder.Entity("RestaurantReservation.Domain.CustomerAggregate.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RestaurantReservation.Domain.RestaurantAggregate.Models.Restaurant", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
